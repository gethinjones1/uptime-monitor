version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    working_dir: /app/api # run inside the api module
    command: [ "air", "-c", ".air.toml" ]
    volumes:
      - ./api:/app/api # mount your api code & config
      - /app/api/tmp # persist Airâ€™s output dir
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=uptime
      - JWT_SECRET=+wmTj8iM3drhsuaGDyaAwSeIY/qvdzmjly09hk0zfoI=
    depends_on:
      - migrate

  migrate:
    image: migrate/migrate
    depends_on:
      postgres:
        condition: service_healthy
    command:
      [
        "-path",
        "/migrations",
        "-database",
        "postgres://postgres:postgres@postgres:5432/uptime?sslmode=disable",
        "up"
      ]
    volumes:
      - ./api/migrations:/migrations
    restart: "no"

  worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
    depends_on:
      - postgres
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=uptime
    restart: always

  postgres:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: uptime
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  pgdata:
